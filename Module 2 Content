1. 1.Consider an example of plates stacked over one another in the canteen. 
The plate which is at the top is the first one to be removed, i.e., 
the plate which has been placed at the bottommost position remains in the stack for the longest period. 
So,it can be simply seen to follow LIFO (Last In First Out)/FILO(First In Last Out) order. 
Perform the following operations in the given order on an empty stack of size 4. 
Display the stack after each operation. Mention TOP of the stack. 
CHOICE:You can choose your option as 1.PUSH || 2.POP || 3.SHOW || 4.EXIT

Example test case:
input=
3                                                                               
2                                                               
5
1 5 1 13 1 28 2
4
output=
Stack Underflow!!
Stack Underflow!!                                                               
Invalid choice!!                                                                
Push(5)                                                                         
5                                                                               
Push(13)                                                                        
13                                                                              
5                                                                               
Push(28)                                                                        
28                                                                              
Popped element: 28                                                              
*/

//Write your program from next line

#include <stdio.h>

#include <stdlib.h>

#define SIZE 4

int top = -1, inp_array[SIZE];
void push();
void pop();
void show();

int main()
{
    int choice;

    while (1)
    {
        //printf("\nPerform operations on the stack:");
        //printf("\n1.Push the element\n2.Pop the element\n3.Show\n4.End");
        //printf("\n\nEnter the choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            push();
            break;
        case 2:
            pop();
            break;
        case 3:
            show();
            break;
        case 4:
            exit(0);
        default:
            printf("Invalid choice!!\n");
        }
    }
}

void push()
{
    int x;

    if (top == SIZE - 1)
    {
        printf("Stack Overflow!!\n");
        return;
    }
    else
    {
        //printf("\nEnter the element to be added onto the stack: ");
        scanf("%d", &x);
        top = top + 1;
        inp_array[top] = x;
        printf("Push(%d)\n",x);
        show();
    }
}

void pop()
{
    if (top == -1)
    {
        printf("Stack Underflow!!\n");
    }
    else
    {
        printf("Popped element: %d\n", inp_array[top]);
        top = top - 1;
    }
}

void show()
{
    if (top == -1)
    {
        printf("Stack is empty!!\n");
    }
    else
    {
       // printf("\nElements present in the stack: \n");
        for (int i = top; i >= 0; --i)
            printf("%d\n", inp_array[i]);
    }
}
